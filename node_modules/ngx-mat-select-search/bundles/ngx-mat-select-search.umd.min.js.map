{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-mat-select-search/mat-select-search-clear.directive.ts","ng://ngx-mat-select-search/mat-select-search.component.ts","ng://ngx-mat-select-search/ngx-mat-select-search.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","MatSelectSearchClearDirective","Directive","selector","MatSelectSearchComponent","matSelect","changeDetectorRef","_viewportRuler","matOption","liveAnnouncer","matFormField","_this","this","placeholderLabel","type","noEntriesFoundLabel","indexAndLengthScreenReaderText","clearSearchInput","searching","disableInitialFocus","enableClearOnEscapePressed","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAllCheckboxTooltipMessage","toogleAllCheckboxTooltipPosition","toggleAll","EventEmitter","onTouched","_","_options$","BehaviorSubject","_formControl","FormControl","_showNoEntriesFound$","combineLatest","valueChanges","pipe","filter","_options","switchMap","changes","map","options","startWith","getOptionsLengthOffset","_a","_b","optionsLength","_onDestroy","Subject","prototype","getValue","ngOnInit","panelClass","Array","isArray","disabled","_getHostElement","classList","add","console","openedChange","delay","takeUntil","subscribe","opened","updateInputWidth","_focus","_reset","take","_keyManager","change","adjustScrollTopToFitActiveOptionIntoView","log","previousFirstOption","toArray","keyManager","panelOpen","setTimeout","currentFirstOption","compareWith","setFirstItemActive","showNoEntriesFound","remove","initMultipleHandling","markForCheck","_emitSelectAllBooleanToParent","state","emit","ngOnDestroy","complete","_isToggleAllCheckboxVisible","multiple","_handleKeydown","event","keyCode","A","Z","ZERO","NINE","SPACE","HOME","END","stopPropagation","ESCAPE","_handleKeyup","UP_ARROW","DOWN_ARROW","ariaActiveDescendantId_1","_getAriaActiveDescendant","index","findIndex","item","id","activeDescendant","announce","viewValue","getAriaIndex","getAriaLength","optionIndex","writeValue","_lastExternalInputValue","setValue","onBlur","registerOnChange","fn","tap","undefined","registerOnTouched","searchSelectInput","panel","nativeElement","scrollTop","focus","valueChange","values","restoreSelectedValues_1","previousSelectedValues","optionValues_1","option","forEach","previousValue","some","v","_onChange","initMultiSelectedValues","matOptionHeight","getMatOptionHeight","activeOptionIndex","activeItemIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","indexOfOptionToFitIntoView","currentScrollTop","searchInputHeight","innerSelectSearch","offsetHeight","amountOfVisibleOptions","Math","floor","SELECT_PANEL_MAX_HEIGHT","indexOfFirstVisibleOption","round","panelElement","element","parentElement","contains","style","width","clientWidth","first","getBoundingClientRect","height","selected","MatSelect","Inject","args","ChangeDetectorRef","ViewportRuler","MatOption","Optional","LiveAnnouncer","MatFormField","tslib_1.__decorate","Input","Output","ViewChild","read","ElementRef","static","ContentChild","HostBinding","MatSelectSearchComponent_1","Component","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","changeDetection","ChangeDetectionStrategy","OnPush","tslib_1.__param","NgxMatSelectSearchModule","NgModule","imports","CommonModule","ReactiveFormsModule","MatButtonModule","MatCheckboxModule","MatIconModule","MatInputModule","MatProgressSpinnerModule","MatTooltipModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Directive } from '@angular/core';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n@Directive({\n    selector: '[ngxMatSelectSearchClear]'\n})\nexport class MatSelectSearchClearDirective {}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport { MatSelect, SELECT_PANEL_MAX_HEIGHT } from '@angular/material/select';\nimport { MatFormField } from '@angular/material/form-field';\nimport { A, DOWN_ARROW, END, ESCAPE, HOME, NINE, SPACE, UP_ARROW, Z, ZERO, } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { delay, filter, map, startWith, switchMap, take, takeUntil, tap } from 'rxjs/operators';\n\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n@Component({\n  selector: 'ngx-mat-select-search',\n  templateUrl: './mat-select-search.component.html',\n  styleUrls: ['./mat-select-search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectSearchComponent),\n      multi: true\n    }\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n  /** Label of the search placeholder */\n  @Input() placeholderLabel = 'Suche';\n\n  /** Type of the search input field */\n  @Input() type = 'text';\n\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\n\n  /**\n   *  Text that is appended to the currently active item label announced by screen readers,\n   *  informing the user of the current index, value and total options.\n   *  eg: Bank R (Germany) 1 of 6\n  */\n  @Input() indexAndLengthScreenReaderText = ' of ';\n\n  /**\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n    */\n  @Input() clearSearchInput = true;\n\n  /** Whether to show the search-in-progress indicator */\n  @Input() searching = false;\n\n  /** Disables initial focusing of the input field */\n  @Input() disableInitialFocus = false;\n\n  /** Enable clear input on escape pressed */\n  @Input() enableClearOnEscapePressed = false;\n\n  /**\n   * Prevents home / end key being propagated to mat-select,\n   * allowing to move the cursor within the search input instead of navigating the options\n   */\n  @Input() preventHomeEndKeyPropagation = false;\n\n  /** Disables scrolling to active options when option list changes. Useful for server-side search */\n  @Input() disableScrollToActiveOnOptionsChanged = false;\n\n  /** Adds 508 screen reader support for search box */\n  @Input() ariaLabel = 'dropdown search';\n\n  /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n  @Input() showToggleAllCheckbox = false;\n\n  /** select all checkbox checked state */\n  @Input() toggleAllCheckboxChecked = false;\n\n  /** select all checkbox indeterminate state */\n  @Input() toggleAllCheckboxIndeterminate = false;\n\n  /** Display a message in a tooltip on the toggle-all checkbox */\n  @Input() toggleAllCheckboxTooltipMessage = '';\n\n  /** Define the position of the tooltip on the toggle-all checkbox. */\n  @Input() toogleAllCheckboxTooltipPosition: 'left' | 'right' | 'above' | 'below' | 'before' | 'after' = 'below';\n\n  /** Output emitter to send to parent component with the toggle all boolean */\n  @Output() toggleAll = new EventEmitter<boolean>();\n\n  /** Reference to the search input field */\n  @ViewChild('searchSelectInput', { read: ElementRef, static: true }) searchSelectInput: ElementRef;\n\n  /** Reference to the search input field */\n  @ViewChild('innerSelectSearch', { read: ElementRef, static: true }) innerSelectSearch: ElementRef;\n\n  /** Reference to custom search input clear icon */\n  @ContentChild(MatSelectSearchClearDirective, { static: false }) clearIcon: MatSelectSearchClearDirective;\n\n  @HostBinding('class.mat-select-search-inside-mat-option')\n  get isInsideMatOption(): boolean {\n    return !!this.matOption;\n  }\n\n  /** Current search value */\n  get value(): string {\n    return this._formControl.value;\n  }\n  private _lastExternalInputValue: string;\n\n  onTouched: Function = (_: any) => { };\n\n  /** Reference to the MatSelect options */\n  public set _options(_options: QueryList<MatOption>) {\n    this._options$.next(_options);\n  }\n  public get _options(): QueryList<MatOption> {\n    return this._options$.getValue();\n  }\n  public _options$: BehaviorSubject<QueryList<MatOption>> = new BehaviorSubject<QueryList<MatOption>>(null);\n\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\n  private previousSelectedValues: any[];\n\n  public _formControl: FormControl = new FormControl('');\n\n  /** whether to show the no entries found message */\n  public _showNoEntriesFound$: Observable<boolean> = combineLatest([\n    this._formControl.valueChanges,\n    this._options$.pipe(\n      filter(_options => !!_options),\n      switchMap(_options => _options.changes),\n      map(options => options.length),\n      startWith(this.getOptionsLengthOffset())\n    )\n  ]).pipe(\n    map(([value, optionsLength]) => this.noEntriesFoundLabel && value\n      && optionsLength === this.getOptionsLengthOffset())\n  );\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\n    public changeDetectorRef: ChangeDetectorRef,\n    private _viewportRuler: ViewportRuler,\n    @Optional() @Inject(MatOption) public matOption: MatOption = null,\n    private liveAnnouncer: LiveAnnouncer,\n    @Optional() @Inject(MatFormField) public matFormField: MatFormField = null\n  ) {\n  }\n\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        (<string[]>this.matSelect.panelClass).push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    }\n\n    // set custom mat-option class if the component was placed inside a mat-option\n    if (this.matOption) {\n      this.matOption.disabled = true;\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n    } else {\n      console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n    }\n\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange\n      .pipe(\n        delay(1),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe((opened) => {\n        if (opened) {\n          this.updateInputWidth();\n          // focus the search field when opening\n          if (!this.disableInitialFocus) {\n            this._focus();\n          }\n        } else {\n          // clear it when closing\n          if (this.clearSearchInput) {\n            this._reset();\n          }\n        }\n      });\n\n\n\n    // set the first item active after the options changed\n    this.matSelect.openedChange\n      .pipe(take(1))\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect._keyManager) {\n          this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n        } else {\n          console.log('_keyManager was not initialized.');\n        }\n\n        this._options = this.matSelect.options;\n\n        // Closure variable for tracking the most recent first option.\n        // In order to avoid avoid causing the list to\n        // scroll to the top when options are added to the bottom of\n        // the list (eg: infinite scroll), we compare only\n        // the changes to the first options to determine if we\n        // should set the first item as active.\n        // This prevents unnecessary scrolling to the top of the list\n        // when options are appended, but allows the first item\n        // in the list to be set as active by default when there\n        // is no active selection\n        let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n\n        this._options.changes\n          .pipe(\n            takeUntil(this._onDestroy)\n          )\n          .subscribe(() => {\n\n            // Convert the QueryList to an array\n            const options = this._options.toArray();\n\n            const keyManager = this.matSelect._keyManager;\n            if (keyManager && this.matSelect.panelOpen) {\n\n              // avoid \"expression has been changed\" error\n              setTimeout(() => {\n                // set first item active and input width\n\n                // The true first item is offset by 1\n                const currentFirstOption = options[this.getOptionsLengthOffset()];\n\n                // Check to see if the first option in these changes is different from the previous.\n                const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n\n                // CASE: The first option is different now.\n                // Indiciates we should set it as active and scroll to the top.\n                if (firstOptionIsChanged) {\n                  keyManager.setFirstItemActive();\n                }\n\n                // Update our reference\n                previousFirstOption = currentFirstOption;\n\n                // wait for panel width changes\n                setTimeout(() => {\n                  this.updateInputWidth();\n                });\n\n                if (!this.disableScrollToActiveOnOptionsChanged) {\n                  this.adjustScrollTopToFitActiveOptionIntoView();\n                }\n\n              }, 1);\n\n            }\n          });\n      });\n\n    // add or remove css class depending on whether to show the no entries found message\n    // note: this is hacky\n    this._showNoEntriesFound$.pipe(\n      takeUntil(this._onDestroy)\n    ).subscribe(showNoEntriesFound => {\n      // set no entries found class on mat option\n      if (this.matOption) {\n        if (showNoEntriesFound) {\n          this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n        } else {\n          this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n        }\n      }\n    });\n\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect.panelOpen) {\n          this.updateInputWidth();\n        }\n      });\n\n    this.initMultipleHandling();\n\n    this._options$.pipe(\n      filter(options => !!options),\n      switchMap(options => options.changes),\n      takeUntil(this._onDestroy)\n    ).subscribe(() => {\n      // update view when available options change\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  _emitSelectAllBooleanToParent(state: boolean) {\n    this.toggleAll.emit(state);\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  _isToggleAllCheckboxVisible(): boolean {\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\n  }\n\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event: KeyboardEvent) {\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n    if ((event.key && event.key.length === 1) ||\n      (event.keyCode >= A && event.keyCode <= Z) ||\n      (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n      (event.keyCode === SPACE)\n      || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))\n    ) {\n      event.stopPropagation();\n    }\n\n    // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n    if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n      this._reset(true);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Handles the key up event with MatSelect.\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n   */\n  _handleKeyup(event: KeyboardEvent) {\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n      if (index !== -1) {\n        const activeDescendant = this._options.toArray()[index];\n        this.liveAnnouncer.announce(\n          activeDescendant.viewValue + ' '\n          + this.getAriaIndex(index)\n          + this.indexAndLengthScreenReaderText\n          + this.getAriaLength()\n        );\n      }\n    }\n  }\n\n  /**\n   * Calculate the index of the current option, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n   *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n   */\n  getAriaIndex(optionIndex: number): number {\n    if (this.getOptionsLengthOffset() === 0) {\n      return optionIndex + 1;\n    }\n    return optionIndex;\n  }\n\n  /**\n   * Calculate the length of the options, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n   *    Case 2 [1, 2, 3] will have length of options.length.\n   */\n  getAriaLength(): number {\n    return this._options.toArray().length - this.getOptionsLengthOffset();\n  }\n\n  writeValue(value: string) {\n    this._lastExternalInputValue = value;\n    this._formControl.setValue(value);\n    this.changeDetectorRef.markForCheck();\n  }\n\n  onBlur() {\n    this.onTouched();\n  }\n\n  registerOnChange(fn: (value: string) => void) {\n    this._formControl.valueChanges.pipe(\n      filter(value => value !== this._lastExternalInputValue),\n      tap(() => this._lastExternalInputValue = undefined),\n      takeUntil(this._onDestroy)\n    ).subscribe(fn);\n  }\n\n  registerOnTouched(fn: Function) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Focuses the search input field\n   */\n  public _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n\n    panel.scrollTop = scrollTop;\n  }\n\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  public _reset(focus?: boolean) {\n    this._formControl.setValue('');\n    if (focus) {\n      this._focus();\n    }\n  }\n\n\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  private initMultipleHandling() {\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.matSelect.valueChange\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe((values) => {\n        if (this.matSelect.multiple) {\n          let restoreSelectedValues = false;\n          if (this._formControl.value && this._formControl.value.length\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (!values.some(v => this.matSelect.compareWith(v, previousValue))\n                && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n\n          if (restoreSelectedValues) {\n            this.matSelect._onChange(values);\n          }\n\n          this.previousSelectedValues = values;\n        }\n      });\n\n    this.initMultiSelectedValues();\n  }\n\n  /**\n   * Scrolls the currently active option into the view if it is not yet visible.\n   */\n  private adjustScrollTopToFitActiveOptionIntoView(): void {\n    if (this.matSelect.panel && this.matSelect.options.length > 0) {\n      const matOptionHeight = this.getMatOptionHeight();\n      const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n      const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n      // If the component is in a MatOption, the activeItemIndex will be offset by one.\n      const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n      const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n\n      const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n      const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n\n      const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n\n      if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n      } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight\n          - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n      }\n    }\n  }\n\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n  public updateInputWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\n    let panelElement: HTMLElement;\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  private getMatOptionHeight(): number {\n    if (this.matSelect.options.length > 0) {\n      return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n    }\n\n    return 0;\n  }\n\n  /**\n   *  Initialize this.previousSelectedValues once the first filtering occurs.\n   */\n  initMultiSelectedValues() {\n    combineLatest([\n      this._formControl.valueChanges.pipe(startWith<string, string>(this._formControl.value)),\n      this._options$.pipe(filter(options => !!options))\n    ]).pipe(\n      takeUntil(this._onDestroy)\n    ).subscribe(([value, options]) => {\n      if (this.matSelect.multiple && !value) {\n        this.previousSelectedValues = options\n          .filter(option => option.selected)\n          .map(option => option.value);\n      }\n    });\n  }\n\n  /**\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\n   */\n  private getOptionsLengthOffset(): number {\n    if (this.matOption) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CommonModule } from '@angular/common';\n\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nexport const MatSelectSearchVersion = '3.0.1';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    MatTooltipModule\n  ],\n  declarations: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ],\n  exports: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ]\n})\nexport class NgxMatSelectSearchModule { }\n"]}